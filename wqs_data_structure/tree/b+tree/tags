!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
IS_CEIL	b+tree.c	406;"	d	file:
M	b+tree.h	/^    unsigned int            M;$/;"	m	struct:bptree_s	access:public
MOVE	main.c	47;"	d	file:
__B_TREE_H__	b+tree.h	3;"	d
bptree_create	b+tree.c	/^bptree_create( compare_t compareTo, delete_t deleteTo )$/;"	f	signature:( compare_t compareTo, delete_t deleteTo )
bptree_delete	b+tree.c	/^bptree_delete( bptree_t *btree, void *value)$/;"	f	signature:( bptree_t *btree, void *value)
bptree_destory	b+tree.c	/^bptree_destory(bptree_t **btree)$/;"	f	signature:(bptree_t **btree)
bptree_destory_child	b+tree.c	/^bptree_destory_child(bptree_t *btree, bptree_node_t **node)$/;"	f	file:	signature:(bptree_t *btree, bptree_node_t **node)
bptree_insert	b+tree.c	/^bptree_insert( bptree_t *btree, void *value )$/;"	f	signature:( bptree_t *btree, void *value )
bptree_insert_nofull	b+tree.c	/^bptree_insert_nofull(bptree_t *btree, void *value)$/;"	f	file:	signature:(bptree_t *btree, void *value)
bptree_merge_child	b+tree.c	/^bptree_merge_child(bptree_t *btree, bptree_node_t *parent, int index_node)$/;"	f	file:	signature:(bptree_t *btree, bptree_node_t *parent, int index_node)
bptree_move_left_child	b+tree.c	/^bptree_move_left_child(bptree_t *btree, bptree_node_t *parent, int index_node)$/;"	f	file:	signature:(bptree_t *btree, bptree_node_t *parent, int index_node)
bptree_move_right_child	b+tree.c	/^bptree_move_right_child(bptree_t *btree, bptree_node_t *parent, int index_node)$/;"	f	file:	signature:(bptree_t *btree, bptree_node_t *parent, int index_node)
bptree_node_s	b+tree.h	/^struct bptree_node_s$/;"	s
bptree_node_s::child	b+tree.h	/^    struct bptree_node_s**child;$/;"	m	struct:bptree_node_s	typeref:struct:bptree_node_s::bptree_node_s	access:public
bptree_node_s::is_leaf	b+tree.h	/^    int                  is_leaf;$/;"	m	struct:bptree_node_s	access:public
bptree_node_s::key	b+tree.h	/^    void               **key;$/;"	m	struct:bptree_node_s	access:public
bptree_node_s::keynum	b+tree.h	/^    unsigned int         keynum;$/;"	m	struct:bptree_node_s	access:public
bptree_node_t	b+tree.h	/^typedef struct bptree_node_s bptree_node_t;$/;"	t	typeref:struct:bptree_node_s
bptree_node_t	tags	/^bptree_node_t	b+tree.h	\/^typedef struct bptree_node_s bptree_node_t;$\/;"	t	typeref:struct:bptree_node_s$/;"	t	typeref:struct:bptree_node_s	file:
bptree_s	b+tree.h	/^struct bptree_s$/;"	s
bptree_s::M	b+tree.h	/^    unsigned int            M;$/;"	m	struct:bptree_s	access:public
bptree_s::compareTo	b+tree.h	/^    compare_t               compareTo;$/;"	m	struct:bptree_s	access:public
bptree_s::deleteTo	b+tree.h	/^    delete_t                deleteTo;$/;"	m	struct:bptree_s	access:public
bptree_s::root	b+tree.h	/^    struct bptree_node_s    *root;$/;"	m	struct:bptree_s	typeref:struct:bptree_s::bptree_node_s	access:public
bptree_search	b+tree.c	/^bptree_search( bptree_t *btree, void *value )$/;"	f	signature:( bptree_t *btree, void *value )
bptree_split_child	b+tree.c	/^bptree_split_child(bptree_t *btree, bptree_node_t *parent, int index_node, bptree_node_t *node)$/;"	f	file:	signature:(bptree_t *btree, bptree_node_t *parent, int index_node, bptree_node_t *node)
bptree_t	b+tree.h	/^typedef struct bptree_s bptree_t;$/;"	t	typeref:struct:bptree_s
child	b+tree.h	/^    struct bptree_node_s**child;$/;"	m	struct:bptree_node_s	typeref:struct:bptree_node_s::bptree_node_s	access:public
compareTo	b+tree.h	/^    compare_t               compareTo;$/;"	m	struct:bptree_s	access:public
compareTo	main.c	/^int compareTo(void *va1, void *va2)$/;"	f	signature:(void *va1, void *va2)
compare_t	b+tree.h	/^typedef int (*compare_t) (void *va1, void *va2);$/;"	t
compare_t	tags	/^compare_t	b+tree.h	\/^typedef int (*compare_t) (void *va1, void *va2);$\/;"	t$/;"	t	file:
deleteTo	b+tree.h	/^    delete_t                deleteTo;$/;"	m	struct:bptree_s	access:public
deleteTo	main.c	/^int deleteTo(void *key)$/;"	f	signature:(void *key)
delete_t	b+tree.h	/^typedef int (*delete_t) (void *key);$/;"	t
format	tags	/^!_TAG_FILE_FORMAT	2	\/extended format; --format=1 will not append ;" to lines\/$/;"	v
is_full	b+tree.c	/^is_full(bptree_t *btree, bptree_node_t *node)$/;"	f	file:	signature:(bptree_t *btree, bptree_node_t *node)
is_leaf	b+tree.h	/^    int                  is_leaf;$/;"	m	struct:bptree_node_s	access:public
key	b+tree.h	/^    void               **key;$/;"	m	struct:bptree_node_s	access:public
key_destory	b+tree.c	/^key_destory(bptree_t *btree, void **key)$/;"	f	file:	signature:(bptree_t *btree, void **key)
keynum	b+tree.h	/^    unsigned int         keynum;$/;"	m	struct:bptree_node_s	access:public
main	main.c	/^int main(int argc, const char *argv[])$/;"	f	signature:(int argc, const char *argv[])
make_srand	main.c	/^int make_srand(int range)$/;"	f	signature:(int range)
node_create	b+tree.c	/^node_create(unsigned int M)$/;"	f	file:	signature:(unsigned int M)
node_destory	b+tree.c	/^node_destory( bptree_node_t **node )$/;"	f	file:	signature:( bptree_node_t **node )
node_find_max	b+tree.c	/^node_find_max(bptree_node_t *node)$/;"	f	file:	signature:(bptree_node_t *node)
print	main.c	/^void print(bptree_t *btree)$/;"	f	signature:(bptree_t *btree)
queue	main.c	/^bptree_node_t *queue[100000];$/;"	v
root	b+tree.h	/^    struct bptree_node_s    *root;$/;"	m	struct:bptree_s	typeref:struct:bptree_s::bptree_node_s	access:public
test	main.c	/^int test(void) $/;"	f	signature:(void)
